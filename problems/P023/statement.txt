Suppose you are living with two cats: A and B. There are n napping spots where both cats usually sleep.

Your cats like to sleep and also like all these spots, so they change napping spot each hour cyclically:

Cat A changes its napping place in order: n,n−1,n−2,…,3,2,1,n,n−1,… In other words, at the first hour it's on the spot n and then goes in decreasing order cyclically;
Cat B changes its napping place in order: 1,2,3,…,n−1,n,1,2,… In other words, at the first hour it's on the spot 1 and then goes in increasing order cyclically.
The cat B is much younger, so they have a strict hierarchy: A and B don't lie together. In other words, if both cats'd like to go in spot x then the A takes this place and B moves to the next place in its order (if x<n then to x+1, but if x=n then to 1). Cat B follows his order, so it won't return to the skipped spot x after A frees it, but will move to the spot x+2 and so on.

Calculate, where cat B will be at hour k?

Input:
The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The first and only line of each test case contains two integers n and k (2 ≤ n ≤ 10^9; 1 ≤ k ≤ 10^9) — the number of spots and hour k.

Output:
For each test case, print one integer — the index of the spot where cat B will sleep at hour k.
